/**
* Analizador CSS - Trabajo
*
* PROCESADORES DEL LENGUAJE
* Ingeniería Informática
* UNIVERSIDAD DE BURGOS
*
* @author Gonzalo Cuesta Marín
* @author Diego Miguel Lozano
* @date 16-12-2018
* @version 0.3
*/

options {
	BUILD_TOKEN_MANAGER = true;
	COMMON_TOKEN_ACTION = false;
	STATIC = false;
//	DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(analizadorCSS)

import java.util.Set;
import java.util.LinkedHashSet; // devuelve los elementos en el mismo orden en el que se añadieron
import java.awt.Color; // utilidad empleada para la conversión de formatos de color
import java.util.regex.Matcher; // busca en una determinada secuencia el patrón indicado por Pattern
import java.util.regex.Pattern; // indica el patrón que buscaremos posteriormente con Matcher
import java.lang.Math;
import java.lang.reflect.Field; // da información sobre un determinado campo de una clase
								
public class analizadorCSS {

	public static void main(String args[]) throws java.io.FileNotFoundException {

		analizadorCSSTokenManager tkmgr;

		if (args.length < 1) { // en caso de no pasar fichero, leemos de la entrada
			tkmgr = new analizadorCSSTokenManager(new SimpleCharStream(System.in));
		} else {
		  	tkmgr = new analizadorCSSTokenManager(
						new SimpleCharStream(new java.io.FileInputStream(args[0]),0,0));
		}
		
		Token tk;

		try {
			while ((tk = tkmgr.getNextToken()).kind != EOF);
			printResult(tkmgr);
		} catch(TokenMgrError err) {
			System.err.println("\nError al analizar. Asegúrese de que el fichero .css no contiene errores.\n");
			throw err;
		}	
	}

	/**
	* Imprime el resultado del análisis.
	*
	* @param tkmgr token manager
	*/
	private static void printResult(analizadorCSSTokenManager tkmgr) {
	  	System.out.println();
		System.out.println(" • La hoja de estilos tiene " + tkmgr.totalRules + " reglas CSS en total.\n");
		System.out.println(" • Contiene un total de " + tkmgr.totalDeclarations + " declaraciones.\n");
		System.out.println(" • La regla con mayor número de declaraciones es \"" + tkmgr.ruleMostDecl + "\",");
		System.out.println("   con un total de " + tkmgr.nRuleMostDecl + " declaraciones.\n");
		System.out.println(" • La regla con el selector más largo es \"" + tkmgr.longestSelector + "\".\n");
		System.out.println(" • En la hoja de estilos, se modifican las siguientes propiedades:");
		printProperties(tkmgr);
		if(tkmgr.colorsrgb.size() > 0) { // si hay colores
			printInfoColors(tkmgr);
		} else {
		  	System.out.println(" • No ha habido referencias a colores. \n");
		}
	}

	/**
	* Imprime la lista de propiedades de la hoja de estilos.
	*
	* @param tkmgr token manager
	*/
	private static void printProperties(analizadorCSSTokenManager tkmgr) {
		for(String property : tkmgr.properties) {
			System.out.println("     ◦ " + property);
		}
		System.out.println();
	}

	/**
	* Devuelve el número total de referencias a color.
	*
	* @param tkmgr token manager
	*
	* @return número total de referencias a color
	*
	*/
	private static int getTotalRefColors(analizadorCSSTokenManager tkmgr) {
		return tkmgr.totalRGBformat + tkmgr.totalRGBAformat + tkmgr.totalHSLformat + tkmgr.totalHSLAformat
				+ tkmgr.totalRRGGBBformat + tkmgr.totalNameColorformat + tkmgr.totalRGBfuncformat;
	}

	/**
	* Imprime la información acerca de los colores referenciados.
	*
	* @param tkmgr token manager
	*/
	private static void printInfoColors(analizadorCSSTokenManager tkmgr) {
	  	System.out.println(" • Se han utilizado un total de " + tkmgr.colorsrgb.size() + " colores distintos.\n");
		System.out.println(" • En total, ha habido " + getTotalRefColors(tkmgr) + " referencias a colores, de las cuales:");
		if(tkmgr.totalRRGGBBformat > 0) System.out.println("     ◦ " + tkmgr.totalRRGGBBformat + " son de tipo RRGGBB.");
		if(tkmgr.totalRGBformat > 0) System.out.println("     ◦ " + tkmgr.totalRGBformat + " son de tipo RGB.");
		if(tkmgr.totalRGBfuncformat > 0) System.out.println("     ◦ " + tkmgr.totalRGBfuncformat + " son de tipo rgb(R, G, B).");
		if(tkmgr.totalRGBAformat > 0) System.out.println("     ◦ " + tkmgr.totalRGBAformat + " son de tipo rgba(R, G, B, A%).");
		if(tkmgr.totalHSLformat > 0) System.out.println("     ◦ " + tkmgr.totalHSLformat + " son de tipo hsl(H, S%, L%).");
		if(tkmgr.totalHSLAformat > 0) System.out.println("     ◦ " + tkmgr.totalHSLAformat + " son de tipo hsla(H, S%, L%, A%).");
		if(tkmgr.totalNameColorformat > 0) System.out.println("     ◦ " + tkmgr.totalNameColorformat + " han sido referenciados por su nombre.\n");
	}	  
}

PARSER_END(analizadorCSS)

TOKEN_MGR_DECLS:
{
  /**
  *	Definiciones de variables.
  */
	int totalRules = 0; // número total de reglas CSS (se ignoran reglas-at)
	int totalDeclarations = 0; // número total de declaraciones
	int totalRGBformat = 0; // número de referencias a un color con formato RGB
	int totalRGBAformat = 0; // número de referencias a un color con formato RGBA
	int totalHSLAformat = 0; // número de referencias a un color con formato HSLA
	int totalRRGGBBformat = 0; // número de referencias a un color con formato RRGGBB
	int totalRGBfuncformat = 0; // número de referencias a un color con formato RGB (función)
	int totalHSLformat = 0; // número de referencias a un color con formato HSL
	int totalNameColorformat = 0; // número de referencias a un color por su nombre
	String currentRule = ""; // selector de la regla actual
	String currentProperty = ""; //propiedad de la regla actual
	int currentDeclarations = 0; // número de declaraciones de la regla actual
	String ruleMostDecl = ""; // selector de la regla con más declaraciones
	int nRuleMostDecl = 0; // número de declaraciones de la regla con más declaraciones
	String longestSelector = ""; // selector más largo
	Set<String> properties = new LinkedHashSet<String>(); // propiedades modificadas (no repetidas)
	Set<String> colorsrgb = new LinkedHashSet<String>(); // colores utilizados (no repetidos)


  /**
  *	Definiciones de métodos.
  */

	/**
	* Actualiza la regla con mayor número de declaraciones.
	*
	* @param currentRule selector de la regla actual
	* @param currentDeclarations número de declaraciones de la regla actual
	*/
	void updteRuleMostDecl(String currentRule, int currentDeclarations) {
		if(currentDeclarations > nRuleMostDecl) {
		  	ruleMostDecl = currentRule;
			nRuleMostDecl = currentDeclarations;
		}
	}
	/**
	* Actualiza el selector más largo.
	*
	* @param currentRule selector de la regla actual
	*/
	void updteLongestSelector(String currentRule) {
		if(currentRule.length() > longestSelector.length()) {
			longestSelector = currentRule;
		}
	}

	/**
	* Actualiza la lista de colores añadiendo el color pasado como parámetro. 
	*
	* @param color cadena color
	*/
	void colorAdd(String color) {
	    // añadimos el color pasado como parámetro a la lista de colores
	    if(color.length() == 4) { // si es del tipo #RGB (logitud de la cadena siempre 4)
	      	colorsrgb.add(rgb2Color(color).toString());
	   	} else if(color.length() == 7) { // si es del tipo #RRGGBB (logitud de la cadena siempre 7)
			colorsrgb.add(hex2Color(color).toString());
	    } else if (rgbOrRgba2Color(color) != null){ // si la cadena coincide con el patrón asociado a rgba(R, G, B, A%) o rgb(R, G, B)
	   	  	colorsrgb.add(rgbOrRgba2Color(color).toString());
	   	} else if(hslOrHsla2Color(color) != null){ // si la cadena coincide con el patrón asociado a hsla(H, S%, L%, A%) o hsl(H, S%, L%)
		  	colorsrgb.add(hslOrHsla2Color(color).toString());   	
		}
		// en caso de que no haya coincidencias, no hacer nada
	}

	/**
	* Transforma una cadena color con formato #RRGGBB a Color, donde R,G,B
	* deben ser numeros enteros del 0 al 9 o letras de la a a la f (mayus o minus).
	*
	* @param color cadena color
	*
	* @return Color color
	*/
	Color hex2Color(String color) {
	    // devolvemos la cadena color en formato Color, pasando como parámetros los valores R, G y B 			 
    	return new Color(Integer.valueOf( color.substring(1, 3), 16),	
            			 Integer.valueOf( color.substring(3, 5), 16),
            			 Integer.valueOf( color.substring(5, 7), 16));
 	}
 	
	/**
	* Transforma una cadena color con formato #RGB a Color, donde R,G,B
	* deben ser numeros enteros del 0 al 9 o letras de la a a la f (mayus o minus).
	*
	* @param color cadena color
	*
	* @return Color color
	*/
	Color rgb2Color(String color) {
	    // transformar RGB a hexadecimal
	  	String R = color.substring(1, 2) + color.substring(1, 2) ;
	  	String G = color.substring(2, 3) + color.substring(2, 3) ;
	  	String B = color.substring(3, 4) + color.substring(3, 4) ;
	  	// mismo proceso que en el método hex2Color
    	return new Color(Integer.valueOf(R , 16),
            			 Integer.valueOf(G , 16),
            			 Integer.valueOf(B , 16));
 	}

	/**
	* Transforma una cadena color con formato rgb(R, G, B) a Color,
	* donde R,G,B deben ser numeros enteros del 0 al 255 o con formato
	* rgba(R, G, B, A%), donde A debe ser un numero entero del 0 al 100.
	*
	* @param color cadena color
	*
	* @return Color color
	*/
 	Color rgbOrRgba2Color(String color) {
    	Pattern c = Pattern.compile("rgb *\\( *([0-9]+), *([0-9]+), *([0-9]+) *\\)"); // patrón de rgb
    	Matcher m = c.matcher(color); // creamos el objeto asociado al patrón rgb pasando la cadena a analizar como parámetro
    	Pattern ca = Pattern.compile("rgba *\\( *([0-9]+), *([0-9]+), *([0-9]+), *([0-9]+)%? *\\)"); // patrón de rgba
    	Matcher ma = ca.matcher(color); // creamos el objeto asociado al patrón rgba pasando la cadena a analizar como parámetro
    	if (m.matches()){ // si coincide la cadena con el patron c
    		// devolvemos el color en formato Color pasando como parámetro los valores r, g y b.
        	return new Color(Integer.valueOf(m.group(1)),  
                         	 Integer.valueOf(m.group(2)),  
                         	 Integer.valueOf(m.group(3))); 
    	}
    	if (ma.matches()){ // si coincide la cadena con el patron ca
    	    // devolvemos el color en formato Color pasando como parámetro los valores r, g, b y a.
        	return new Color(Integer.valueOf(ma.group(1)),  
                         	 Integer.valueOf(ma.group(2)),  
                         	 Integer.valueOf(ma.group(3)),
                         	 Integer.valueOf(ma.group(4))); 
    	}
    	return null;  // si no hay coincidencias devuelve nulo
	}

	/**
	* Transforma una cadena color con formato hsl(H, S%, L%) o hsla(H, S%, L%, A%) a Color,
	* donde H es un número entero del 0 al 360 y S,L,A son números enteros
	* del 0 al 100.
	*
	* Las ecuaciones de transformación utilizadas han sido extraídas del siguiente enlace:
	* https://en.wikipedia.org/wiki/HSL_and_HSV.
	*
	* @param color cadena color
	*
	* @return Color color
	*/
	Color hslOrHsla2Color(String color) {
	  	boolean hsl = false; // indicador que nos permite saber qué patrón (HSL o HSLA) coincide con la cadena de entrada
	  	Pattern ca = Pattern.compile("hsla *\\( *([0-9]+)%?, *([0-9]+)%?, *([0-9]+)%?, *([0-9]+(\\.([0-9]+))?)%? *\\)"); // patrón del tipo HSLA
    	Matcher ma = ca.matcher(color); // creamos el objeto asociado al patrón HSLA pasando la cadena a analizar como parámetro
    	Pattern c = Pattern.compile("hsl *\\( *([0-9]+)%?, *([0-9]+)%?, *([0-9]+)%? *\\)"); // patrón del tipo HSL
    	Matcher m = c.matcher(color); // creamos el objeto asociado al patrón HSL pasando la cadena a analizar como parámetro
    	float h, s, l, a=0f;
    	if (ma.matches()){  // si coincide la cadena con el patrón ca
    		// obtenemos los valores h,s,l,a para su posterior conversión
        	h = Float.valueOf(ma.group(1))/100;
	        s = Float.valueOf(ma.group(2))/100;
	        l = Float.valueOf(ma.group(3))/100;
	      	a = Float.valueOf(ma.group(4))/100;    	 
    	}else if (m.matches()){ // si coincide con el patrón c
    		// confirmamos que el tipo es hsl y obtenemos los valores h,s,l para su posterior conversión
    	    hsl = true;
    	  	h = Float.valueOf(m.group(1))/100;
	        s = Float.valueOf(m.group(2))/100;
	        l = Float.valueOf(m.group(3))/100;
    	} else { 
		  // si no hay coincidencias devuelve nulo
    	  return null;
   		}
   		// una vez tenemos los datos necesarios transformamos los valores h,s,l al formato r,g,b siguiendo la ecuación de transformación
    	float r, g, b;
	    if (s == 0f) {
        	r = g = b = l; 
    	} else {
        	float q = l < 0.5f ? l * (1 + s) : l + s - l * s;
	        float p = 2 * l - q;
	        r = hueToRgb(p, q, h + 1f/3f);
	        g = hueToRgb(p, q, h);
	        b = hueToRgb(p, q, h - 1f/3f);
    	}

	    r = Math.round(r * 255.0);
	    g = Math.round(g * 255.0);
   		b = Math.round(b * 255.0);

    	// independientemente de si el tipo es HSL o HSLA devuelve un nuevo objeto Color. Si es HSL pasamos los valores
    	// r,g,b al constructor, si es HSLA añadimos el valor alpha a estos tres valores.
	    return hsl ? new Color((int)r,(int)g,(int)b) : new Color((int)r,(int)g,(int)b, (int)a);  
	}
	
	/**
	* Método auxiliar para transformar el "hue" a rgb.
	*
	* Los parámetros de entrada son meramente auxiliares, es decir, carecen de significado pero
	* son necesarios para llevar a cabo  los cálculos utilizados en la ecuación de transformación
	* (de hsl a rgb).
	*
	* @param p variable auxiliar 
	* @param q variable auxiliar
	* @param t variable auxiliar 
	*
	* @return p variable auxiliar
	*/
	float hueToRgb(float p, float q, float t){
		// este proceso corresponde a la ecuación de transformación de los valores h,s,l a r,g,b.
	    if (t < 0f) t += 1f;
    	if (t > 1f) t -= 1f;
    	if (t < 1f/6f) return p + (q - p) * 6f * t;
    	if (t < 1f/2f) return q;
    	if (t < 2f/3f) return p + (q - p) * (2f/3f - t) * 6f;
    	return p;
	}
}


/**
* Definiciones de tókenes.
*/
TOKEN:
{
	< #SELECTOR: (["A"-"Z","a"-"z","0"-"9",",",".","#","*",">","+","~",
				 "[","]","(",")","=","|","^","$","-","_","\"",":"," ","\t","\n","\r"])+ >
|   < #COLOR_PROPERTY: ("background-color" | "border-block-end-color" | "border-block-start-color" | "border-bottom-color" | "border" | "border-color" 
						| "border-inline-end-color" | "border-inline-start-color" | "border-left-color" | "border-right-color" | "border-top-color"
						| "caret-color" | "column-rule-color" | "outline-color" | "text-decoration-color" | "text-emphasis-color" | "color") >
| 	< #PROPERTY: (([":"]){1,2})? (["A"-"Z","a"-"z","<",">","-","(",")","@"])+ > // resto de propiedades
| 	< #RGB_FUNC: ("rgb")<COLOR_THREE> >
| 	< #HSL_FUNC: ("hsl")<COLOR_THREE> >
| 	< #RGBA_FUNC: ("rgba")<COLOR_FOUR> >
| 	< #HSLA_FUNC: ("hsla")<COLOR_FOUR> >
| 	< #RGB: "#"(["A"-"F","a"-"z","0"-"9"]){3} >
| 	< #RRGGBB: "#"(["A"-"F","a"-"z","0"-"9"]){6} >
|   < #NAME_COLOR: "white"|"black"|"green"|"red"|"orange"|"yellow"|
					"magenta"|"darkGray"|"blue"|"cyan"|"gray"|"brown"|"lightGray" >
|   < #COLOR_FOUR: "("<NUM>","<NUM>","<NUM>","<NUM>")" >
|   < #COLOR_THREE: "("<NUM>","<NUM>","<NUM>")" >
|   < #NUM: (" ")*((<NUM_PER>)|(<NUM_DEC>))(" ")* >
| 	< #NUM_PER: ((["0"-"9"]){1,3}("%")?) >
|   < #NUM_DEC: ((("0")("."(["0"-"9"])+)?)|"1") >
|	< #EOL: ("\n" | "\r")* >
| 	< #ESP: (" " | "\t" | "\n" | "\r") >
}

/**
* Comentarios.
*/
<*> SKIP:
{
  < COMMENT: "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >
}

/**
* Reglas-@.
*/
SKIP:
{
	< AT_RULE: "@" <SELECTOR> <EOL> ((~[";","{"])+ ";" | "{") >
	// una regla-at puede ser de "línea" (ej. @import) o anidada (ej. @media)							
}

/**
* Comienzo de regla CSS.
*/
TOKEN:
{
 	< RULE_START: <SELECTOR> "{"> {	String str = image.toString();
 									// quitamos "{" y reemplazamos saltos de línea por espacios en blanco
 									currentRule = str.substring(0, str.length() - 1).replace("\n"," ").trim();
	 	  							updteLongestSelector(currentRule);
	 	  							totalRules++;
	 	  							SwitchTo(RULE_BODY);}

}

/**
* Bloque declarativo.
*/
<RULE_BODY> TOKEN:
{
	< COLOR: <COLOR_PROPERTY> > { properties.add(image.toString().trim()); SwitchTo(COLOR_VALUE); }
| 	< RULE_PROPERTY: <PROPERTY> > { properties.add(image.toString().trim()); SwitchTo(OTHER_VALUE); }
	 // el "}" opcional en caso de que estemos dentro de una regla-at anidada
|   < RULE_END: ("}" (<ESP>)*)? "}" > { updteRuleMostDecl(currentRule, currentDeclarations);
								     	currentRule = ""; // reiniciamos valores
								     	currentDeclarations = 0;
								     	SwitchTo(DEFAULT); }
}

/**
* Valores para colores.
*/
<COLOR_VALUE> TOKEN:
{
    < INI: ":" > { totalDeclarations++;
 				   currentDeclarations++; }
| 	< COLOR_RGB: <RGB>(";")? > { colorAdd(image.toString().replace(";","").trim()); totalRGBformat++; SwitchTo(RULE_BODY);}
|   < NAME_COLOUR: <NAME_COLOR>(";")? > { Color color;
									try {
									    // adquirimos de la clase Color el objeto Color que coincida con la cadena introducida
    									Field field = Class.forName("java.awt.Color").getField(image.toString().replace(";","").trim()); 
   										color = (Color)field.get(null);
									} catch (Exception e) {
									  	// si resulta que no hay ninguna coincidencia dejamos el valor de color a null
    									color = null; 
									}
									// si ha habido una coincidencia añadimos el color obtenido (de tipo Color) a la lista de colores
									if (color != null) { colorsrgb.add(color.toString()); totalNameColorformat++; }SwitchTo(RULE_BODY);}
|   < COLOR_RRGGBB:  <RRGGBB>(";")? > { colorAdd(image.toString().replace(";","").trim()); totalRRGGBBformat++; SwitchTo(RULE_BODY);}
|   < RGB_F:  <RGB_FUNC>(";")? > { colorAdd(image.toString().replace(";","").trim()); totalRGBfuncformat++; SwitchTo(RULE_BODY);}
|   < HSL:  <HSL_FUNC>(";")? > { colorAdd(image.toString().replace(";","").trim()); totalHSLformat++; SwitchTo(RULE_BODY);}
|   < HSLA:  <HSLA_FUNC>(";")? > { colorAdd(image.toString().replace(";","").trim()); totalHSLAformat++; SwitchTo(RULE_BODY);}
|   < RGBA:  <RGBA_FUNC>(";")? > { colorAdd(image.toString().replace(";","").trim()); totalRGBAformat++; SwitchTo(RULE_BODY);}
|   < IGNORE: ~[";","}"] >
}

/**
* Resto de valores.
*/
<OTHER_VALUE> TOKEN:
{
   < VALUE: ":" (~[";","}"])+ (";")? > { totalDeclarations++;
 										 currentDeclarations++;
 										 SwitchTo(RULE_BODY); }
}




/**
* Ignorar blancos.
*/
<*> SKIP:
{
	< IGN: <ESP> >
}
